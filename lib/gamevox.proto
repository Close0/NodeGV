package GamevoxProto;

option optimize_for = SPEED;

message UDPTunnel {
        required bytes packet = 1;
}

message Ping {
        optional uint64 timestamp = 1;
        optional uint32 good = 2;
        optional uint32 late = 3;
        optional uint32 lost = 4;
        optional uint32 resync = 5;
        optional uint32 udp_packets = 6;
        optional uint32 tcp_packets = 7;
        optional float udp_ping_avg = 8;
        optional float udp_ping_var = 9;
        optional float tcp_ping_avg = 10;
        optional float tcp_ping_var = 11;
}

message ServerSync {
        message ThemeManifestItem {
                optional string filename = 1;
                optional bytes checksum = 2;
        }
        optional uint32 session = 1;
        optional uint32 max_bandwidth = 2;
        optional string welcome_text = 3;
        optional uint64 permissions = 4;

        optional bool allow_html = 5;
        optional uint32 image_message_length = 6;
        optional uint32 message_length = 7;

        optional string banner_image_url = 8;
        optional string banner_url = 9;
        optional string rss_url = 10;
        optional string server_name = 11;
        optional bool is_free = 12;
        optional string owner_id = 13;
        optional string lookup_id = 14;
        optional string theme_id = 15;
        repeated ThemeManifestItem theme_manifest = 16;

        optional CryptSetup crypt_setup = 17;
        repeated ChannelState channels = 18;
        repeated UserState users = 19;
}

message ChannelRemove {
        required uint32 channel_id = 1;
}

message ChannelState {
        optional uint32 channel_id = 1;
        optional uint32 parent = 2;
        optional string name = 3;
        repeated uint32 links = 4;
        optional string description = 5;
        repeated uint32 links_add = 6;
        repeated uint32 links_remove = 7;
        optional bool temporary = 8 [default = false];
        optional int32 position = 9 [default = 0];
        optional bytes description_hash = 10;
        optional string password = 11;
}

message UserRemove {
        required uint32 session = 1;
        optional uint32 actor = 2;
        optional string reason = 3;
        optional bool ban = 4;
}

message UserState {
        optional uint32 session = 1;
        optional uint32 actor = 2;
        optional string name = 3;
        optional string user_id = 4;
        optional uint32 channel_id = 5;
        optional bool mute = 6;
        optional bool deaf = 7;
        optional bool suppress = 8;
        optional bool self_mute = 9;
        optional bool self_deaf = 10;
        optional bytes plugin_context = 11;
        optional string plugin_identity = 12;
        optional string comment = 13;
        optional string hash = 14;
        optional bytes comment_hash = 15;
        optional bool priority_speaker = 16;
        optional bool recording = 17;
        optional string channel_password = 18;
        optional uint32 password_channel_id = 19;
        optional string avatar_url = 20;
        optional string alias = 21;
}

message BanList {
        message BanEntry {
                required bytes address = 1;
                required uint32 mask = 2;
                optional string name = 3;
                optional string hash = 4;
                optional string reason = 5;
                optional string start = 6;
                optional uint32 duration = 7;
                optional string alias = 8;
        }
        repeated BanEntry bans = 1;
        optional bool query = 2 [default = false];
}

message TextMessage {
        optional uint32 actor = 1;
        repeated uint32 session = 2;
        repeated uint32 channel_id = 3;
        repeated uint32 tree_id = 4;
        required string message = 5;
}

message PermissionDenied {
        enum DenyType {
                Text = 0;
                Permission = 1;
                SuperUser = 2;
                ChannelName = 3;
                TextTooLong = 4;
                H9K = 5;
                TemporaryChannel = 6;
                MissingCertificate = 7;
                UserName = 8;
                ChannelFull = 9;
                ChannelPassword = 10;
        }
        optional uint32 permission = 1;
        optional uint32 channel_id = 2;
        optional uint32 session = 3;
        optional string reason = 4;
        optional DenyType type = 5;
        optional string name = 6;
        optional uint32 channel_failed_id = 7;
        optional string alias = 8;
}

message ACL {
        message ChanGroup {
                required string name = 1;
                optional bool inherited = 2 [default = true];
                optional bool inherit = 3 [default = true];
                optional bool inheritable = 4 [default = true];
                repeated string add = 5;
                repeated string remove = 6;
                repeated string inherited_members = 7;
        }
        message ChanACL {
                optional bool apply_here = 1 [default = true];
                optional bool apply_subs = 2 [default = true];
                optional bool inherited = 3 [default = true];
                optional string user_id = 4;
                optional string group = 5;
                optional uint32 grant = 6;
                optional uint32 deny = 7;
        }
        required uint32 channel_id = 1;
        optional bool inherit_acls = 2 [default = true];
        repeated ChanGroup groups = 3;
        repeated ChanACL acls = 4;
        optional bool query = 5 [default = false];
}

message CryptSetup {
        optional bytes key = 1;
        optional bytes mac_key = 2;
        optional bytes client_nonce = 3;
        optional bytes server_nonce = 4;
        optional string udp_address = 5;
        optional uint32 udp_port = 6;
}

message ContextActionAdd {
        enum Context {
                Server = 0x01;
                Channel = 0x02;
                User = 0x04;
        }
        required string action = 1;
        required string text = 2;
        optional uint32 context = 3;
}

message ContextAction {
        optional uint32 session = 1;
        optional uint32 channel_id = 2;
        required string action = 3;
}

message UserList {
        message User {
                required string user_id = 1;
                optional string name = 2;
                enum Action {
                        None = 0;
                        Add = 1;
                        Remove = 2;
                }
                optional Action action = 3 [default = None];
                optional string alias = 4;
        }
        repeated User users = 1;
}

message VoiceTarget {
        message Target {
                repeated uint32 session = 1;
                optional uint32 channel_id = 2;
                optional string group = 3;
                optional bool links = 4 [default = false];
                optional bool children = 5 [default = false];
        }
        optional uint32 id = 1;
        repeated Target targets = 2;
}

message PermissionQuery {
        optional uint32 channel_id = 1;
        optional uint32 permissions = 2;
        optional bool flush = 3 [default = false];
}

message CodecVersion {
        required int32 alpha = 1;
        required int32 beta = 2;
        required bool prefer_alpha = 3 [default = true];
}

message UserStats {
        message Stats {
                optional uint32 good = 1;
                optional uint32 late = 2;
                optional uint32 lost = 3;
                optional uint32 resync = 4;
        }

        optional uint32 session = 1;
        optional bool stats_only = 2 [default = false];
        repeated bytes certificates = 3;
        optional Stats from_client = 4;
        optional Stats from_server = 5;

        optional uint32 udp_packets = 6;
        optional uint32 tcp_packets = 7;
        optional float udp_ping_avg = 8;
        optional float udp_ping_var = 9;
        optional float tcp_ping_avg = 10;
        optional float tcp_ping_var = 11;

        repeated int32 celt_versions = 12;
        optional bytes address = 13;
        optional uint32 bandwidth = 14;
        optional uint32 onlinesecs = 15;
        optional uint32 idlesecs = 16;
        optional bool strong_certificate = 17 [default = false];
}

message RequestBlob {
        repeated uint32 session_comment = 1;
        repeated uint32 channel_description = 2;
}

message ServerSettings {
        optional bytes banner_image = 1;
        optional string banner_link_url = 2;
        optional string password = 3;
        optional string motd = 4;
        optional string rss_url = 5;
        optional string theme_id = 6;
        optional bool query = 7;
        optional string banner_image_url = 8;
        optional bool free_server = 9;
        optional string server_name = 10;
}

message ServerTheme {
        message ManifestFile {
                required string filename = 1;
                optional string checksum = 2;
                optional uint64 bytes = 3;
        }
        repeated ManifestFile manifest_file = 1;
        optional string theme_id = 2;
        optional bool success = 3;
        optional string reason = 4;
}

message RequestConversation {
        optional uint64 session_id = 1;
        optional string user_id = 2;
        optional bool success = 3;
        optional string reason = 4;
}

message Permissions {
        repeated ACL acls = 1;
        optional UserList users = 2;
}